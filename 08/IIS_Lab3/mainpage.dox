/*!
@mainpage Звіт з лабораторної роботи 3
за дисципліною "Інтелектуальні інформаційні системи"  
студента групи ПА-17-2  
Панасенка Єгора Сергійовича  
Кафедра комп'ютерних технологій  
ФПМ, ДНУ, 2020-2021 навч.р.  
Варант 17  

Звіт доступний за посиланням   
[https://gaurapanasenko.github.io/unilab_opt/IIS_Lab3/html/index.html](https://gaurapanasenko.github.io/unilab_opt/IIS_Lab3/html/index.html).  
Вихідний код доступний за посиланням  
[https://github.com/gaurapanasenko/unilab/tree/master/08/IIS_Lab3](https://github.com/gaurapanasenko/unilab/tree/master/08/IIS_Lab3)

# Постановка задачі

Розв’язати задачу про комівояжера, використовуючи такі методи пошуку:
1. Метод перебору.
2. Метод пошуку в глибину.
3. Метод пошуку в ширину.
4. Метод найкоротшого шляху.
5. Метод Мура.
6. Метод Дейкстри.
7. Метод гілок і меж.
8. Метод Нільсона.
Розв’язати задачу про туриста, використовуючи такі методи пошуку:
9. Метод перебору.
10. Метод пошуку в глибину.
11. Метод пошуку в ширину.
12. Метод найкоротшого шляху.
13. Метод Мура.
14. Метод Дейкстри.
15. Метод гілок і меж.
16. Метод Нільсона.

# Побудова графу

Побудуємо деяке сімейне дерево.

@dot
digraph family {
    a [ label="A" ];
    b [ label="B" ];
    c [ label="C"];
    d [ label="D" ];
    e [ label="E" ];
    a -> b;
    b -> c;
    c -> d;
    d -> e;
    e -> c;
    c -> a;
}
@enddot

# Результат роботи програми

Використаємо компілятор `swipl`, для початку зкомпілюємо нашу програму.

Тепер запустимо програму та перевримо роботу алгоритму пошуку перебору:
```
?- find_optimal(X, Y).
X = 0+1+2,
Y = [node(b, c, 2), node(a, b, 1)].
```

Та запустимо перевірку алгоритму для задачі про мандрівника:
```
?- travelable(a).
true.

?- travelable(f).
false.
```

# Висновки

Було розроблено програму, яка здатна перебором вирішувати задачу комівояжера та задачу про мандрівника. Для обох задач був розроблений універсальні предикати, які можуть використовуватися для пошуку перебором у будь-якому двонаправленому графі.

*/
